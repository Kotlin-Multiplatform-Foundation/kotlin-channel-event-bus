{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kotlin-channel-event-bus \ud83d\udd06","text":""},{"location":"#multi-keys-multi-producers-single-consumer-event-bus-backed-by-kotlinxcoroutineschannelschannels","title":"Multi-keys, multi-producers, single-consumer event bus backed by <code>kotlinx.coroutines.channels.Channel</code>s.","text":"<ul> <li> <p>A Kotlin Multiplatform library that provides a simple event bus implementation using   <code>kotlinx.coroutines.channels.Channel</code>s.   This is useful for UI applications where you want to send events to communicate between   different parts / scope of your application (e.g. send results from one screen to another).</p> </li> <li> <p>This bus is thread-safe to be used by multiple threads.   It is safe to send events from multiple threads without any synchronization.</p> </li> <li> <p><code>ChannelEvent.Key</code> will be used to identify a bus for a specific type of events.   Each bus has a <code>Channel</code> to send events to and a <code>Flow</code> to receive events from.</p> </li> <li> <p>The <code>Channel</code> is unbounded (<code>Channel.UNLIMITED</code> - default) or conflated <code>Channel.CONFLATED</code>.   The <code>Flow</code> is cold and only one collector is allowed at a time.   This makes sure all events are consumed.</p> </li> </ul>"},{"location":"#author-petrus-nguyen-thai-hoc","title":"Author: Petrus Nguy\u1ec5n Th\u00e1i H\u1ecdc","text":"<p>Like some of my work? Could you buy me a coffee (or more likely a beer)?</p> <p></p>"},{"location":"#docs","title":"Docs","text":"<ul> <li><code>latest release</code> docs: https://kotlin-multiplatform-foundation.github.io/kotlin-channel-event-bus/docs/latest</li> <li>Snapshot docs: https://kotlin-multiplatform-foundation.github.io/kotlin-channel-event-bus/docs/latest/</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>allprojects {\n  repositories {\n    [...]\n    mavenCentral()\n  }\n}\n</code></pre> <pre><code>implementation(\"io.github.hoc081098:channel-event-bus:0.1.0\")\n</code></pre>"},{"location":"#snapshot","title":"Snapshot","text":"Snapshots of the development version are available in Sonatype's snapshots repository.  - Kotlin  <pre><code>allprojects {\n  repositories {\n    [...]\n    maven(url = \"https://s01.oss.sonatype.org/content/repositories/snapshots/\")\n  }\n}\n\ndependencies {\n  implementation(\"io.github.hoc081098:channel-event-bus:0.1.1-SNAPSHOT\")\n}\n</code></pre>  - Groovy  <pre><code>allprojects {\n  repositories {\n    [...]\n    maven { url \"https://s01.oss.sonatype.org/content/repositories/snapshots/\" }\n  }\n}\n\ndependencies {\n  implementation 'io.github.hoc081098:channel-event-bus:0.1.1-SNAPSHOT'\n}\n</code></pre>"},{"location":"#basic-usage","title":"Basic usage","text":"<pre><code>// Create your event type\ndata class AwesomeEvent(val payload: Int) : ChannelEvent&lt;AwesomeEvent&gt; {\n  override val key get() = Key\n\n  companion object Key : ChannelEventKey&lt;AwesomeEvent&gt;(AwesomeEvent::class)\n}\n\n// Create your bus instance\nval bus = ChannelEventBus()\n\n// Send events to the bus\nbus.send(AwesomeEvent(1))\nbus.send(AwesomeEvent(2))\nbus.send(AwesomeEvent(3))\n\n// Receive events from the bus\nbus\n  .receiveAsFlow(AwesomeEvent) // or bus.receiveAsFlow(AwesomeEvent.Key) if you want to be explicit\n  .collect { e: AwesomeEvent -&gt; println(e) }\n</code></pre>"},{"location":"#supported-targets","title":"Supported targets","text":"<ul> <li><code>jvm</code> / <code>android</code>.</li> <li><code>js</code> (<code>IR</code>).</li> <li><code>wasmJs</code>.</li> <li><code>Darwin</code> targets:</li> <li><code>iosArm64</code>, <code>iosX64</code>, <code>iosSimulatorArm64</code>.</li> <li><code>watchosArm32</code>, <code>watchosArm64</code>, <code>watchosX64</code>, <code>watchosSimulatorArm64</code>, <code>watchosDeviceArm64</code>.</li> <li><code>tvosX64</code>, <code>tvosSimulatorArm64</code>, <code>tvosArm64</code>.</li> <li><code>macosX64</code>, <code>macosArm64</code>.</li> <li><code>mingwX64</code></li> <li><code>linuxX64</code>, <code>linuxArm64</code>.</li> <li><code>androidNativeArm32</code>, <code>androidNativeArm64</code>, <code>androidNativeX86</code>, <code>androidNativeX64</code>.</li> </ul>"},{"location":"#sample","title":"Sample","text":"<ul> <li> <p>Android Compose sample:   an Android app using Compose UI to show how to use the library.   It has two nested navigation graphs: <code>Register</code> and <code>Home</code>.</p> </li> <li> <p>In <code>Register</code>, we have 3 steps (3 screens) to allow the user to input their information, step     by     step.</p> <ul> <li> <p>A <code>RegisterSharedViewModel</code> (bound to <code>Register</code> navigation graph scope) is used   to hold the whole state of the registration process.   It observes events from the <code>ChannelEventBus</code> and updates the state accordingly.</p> </li> <li> <p>Each step screen has a <code>ViewModel</code> to hold the state of the screen and will send events to   the <code>ChannelEventBus</code>,   then the <code>RegisterSharedViewModel</code> will receive those events and update the state.</p> </li> </ul> </li> <li> <p>In the <code>Home</code> nav graph, we have 2 screens: <code>Home</code> and <code>Detail</code>.</p> <ul> <li> <p>The <code>Home</code> screen has a <code>HomeViewModel</code> to hold the results received from the <code>Detail</code> screen.   Those result events are sent from the <code>Detail</code> screen to the <code>ChannelEventBus</code>,   and the <code>HomeViewModel</code> will receive those events and update the state.</p> </li> <li> <p>The <code>Detail</code> screen will send events to the <code>ChannelEventBus</code> when the user clicks on the button.   The <code>HomeViewModel</code> will receive those events and update the state.</p> </li> </ul> </li> </ul> <p>https://github.com/Kotlin-Multiplatform-Foundation/kotlin-channel-event-bus/assets/36917223/80015232-d5b5-4fb2-a779-4e6113ddb8f8</p>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>[x] Support more targets: <code>wasm</code> (depends on supported targets by <code>kotlinx.coroutines</code>) (since 0.1.0).</li> <li>[x] More samples.</li> <li>[ ] More docs.</li> <li>[ ] More tests.</li> </ul>"},{"location":"#license","title":"License","text":"<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n</code></pre>"}]}